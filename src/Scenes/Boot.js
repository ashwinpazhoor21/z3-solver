class BootScene extends Phaser.Scene {
    constructor() {
        super("bootScene");
    }

    async preload() {
        // Load any assets needed for initialization (none needed here)
    }

    async create() {
        // Generate the random location and store it
        const randomLocation = await this.generateRandomLocation();

        // Start Pathfinder scene, passing the generated location
        this.scene.start("pathfinderScene", { randomLocation });
    }

    async generateRandomLocation() {
        const { Context } = await init();
        const { Solver, Int, And, Or } = new Context("main");
        
        const solver = new Solver();
        const x = Int.const('x');
        const y = Int.const('y');
        const possibleLocations = [];

        solver.add(
            Or(
                And(x.gt(21), x.lt(29), y.gt(17), y.lt(20)),
                And(x.gt(34), x.lt(38), y.gt(2), y.lt(6))
            )
        );

        if (await solver.check() === 'sat') {
            while (await solver.check() === 'sat') {
                const model = solver.model();
                const xVal = parseInt(model.eval(x).toString());
                const yVal = parseInt(model.eval(y).toString());
                possibleLocations.push([xVal, yVal]);
                solver.add(Or(x.neq(xVal), y.neq(yVal)));
            }
        } else {
            console.log("No solution found: the constraints may be contradictory.");
        }

        // Select a random location from the possible locations
        const randInt = Math.floor(Math.random() * possibleLocations.length);
        console.log("Random Location generated by Z3: " + possibleLocations[randInt]);

        return possibleLocations[randInt];
    }
}

export default BootScene;
